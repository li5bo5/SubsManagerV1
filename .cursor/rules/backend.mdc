---
description: API设计与实现
globs: 
---
# API设计与实现

## 设计API接口原则

- 定义RESTful API的端点和请求方法。
- 确保接口的清晰性和一致性。

## 1. 总体流程

- 导入订阅→订阅解析→节点汇总→节点检测→节点筛选→生成订阅

### 1.1 订阅导入

- 订阅导入
* 输入订阅名称、订阅链接，点击导入订阅按钮
- 订阅解析
* 检测订阅的类型，解析订阅链接中的节点数，显示在订阅列表中
* 参考https://github.com/2dust/v2rayN的更新订阅功能
- 订阅列表：
* 表头：|复选框|序号|名称|类型|链接|节点数|导入时间（月日时分）|
* 列表订阅中的每一条订阅，支持编辑、删除
* 可编辑内容为节点名称和节点链接
* 列表复选框支持全选、多选、多选删除

### 1.2 一键整合

- 通过复选框选择订阅
- 解析选中的订阅链接中的节点
- 参考https://github.com/sub-store-org/Sub-Store/的功能，将选中订阅包含的节点进行整合
- 将多个订阅链接整合成一个支持OpenClash的订阅文件
- 将整合的订阅保存到本地“Sub-Store-MM-DD-HH-mm.yaml”
- 在“订阅整合”区域，显示整合时间、订阅链接、总结点数

### 1.3 导入节点

- 进一步处理“一键整合”的订阅“Sub-Store-MM-DD-HH-mm.yaml”
- 导入节点：整合订阅包含的节点显示在下方的列表中（序号、类型、别名、地址、端口、传输协议、订阅分组）

### 1.4 一键测速

- 一键测速：参考https://github.com/2dust/v2rayN的功能，对所有节点进行延迟测速和下载测速
* 先进行延迟测速，如果延迟≤400ms则进行下载速度测试，否则，将该节点跳过下载速度测试，直接在列表中显示
* 每个节点测速完成之后，立即在下方列表中刷新节点测速状态（延迟（ms）、下载（M/s））
* 延迟＞400ms的节点，未进行下载测速，下载速度显示“-”
* 列表滚动显示
* 列表下方显示节点总数，下拉框选择每页显示的数量（10,20,50,100），跳转页，上一页、下一页
- 测速进度：进度条及数值显示，已测速完成节点数/总结点数

### 1.4 优选节点

- 开始筛选按钮
* 输入筛选条件，对测速完成的节点进行筛选
* 根据筛选条件进行筛选
* 将筛选的结果显示在“优选结果”列表中
- 生成订阅
* 将保留的节点生成订阅文件“sub.yaml”
* 提供本地地址在web中显示
* 显示包含的节点总数

### 1.5 状态监控

- 显示sub.yaml的节点状态
- 显示sub.yaml本地地址
- 显示Sub-Store+月+日+时+分.yaml本地地址

## 2. 系统设置

- 订阅更新：按照设定周期，对订阅列表中的订阅进行更新，更新结果及时间在订阅列表中更新
- 节点检测：按照设定周期，对节点进行测速。

## 3. 运行日志

- 在web中显示运行日志（时间，操作）
* 订阅导入（导入完成，已导入订阅：订阅名称，节点数：*个）
* 订阅整合（整合完成，已整合N条订阅）
* 订阅删除（删除完成，已删除订阅***）
* 节点测速（测速完成，共计*个节点，延迟测速*个节点，延迟测速丢弃*个节点，下载测速*个节点）
* 优选节点（筛选条件：延迟上限：400ms，速度下限：2M/s，筛选完成，符合条件节点共计:*个 ）
* 优选订阅（生成订阅，订阅地址：http://localhost:3355/sub.yaml）
* 异常处理（如果遇到异常状况，在日志中详细描述异常的代码位置）
